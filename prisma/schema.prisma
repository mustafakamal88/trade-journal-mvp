generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  image          String?
  passwordHash   String?
  accounts       Account[]
  sessions       Session[]
  trades         Trade[]
  journalEntries JournalEntry[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Trade {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  symbol      String
  instrument  Instrument @default(STOCK)
  side        TradeSide
  strategy    String?
  account     String?
  timeframe   String?
  quantity    Decimal
  entryPrice  Decimal
  exitPrice   Decimal?
  stopLoss    Decimal?
  takeProfit  Decimal?
  fees        Decimal    @default(0)
  realizedPnl Decimal    @default(0)
  rr          Decimal?
  openedAt    DateTime
  closedAt    DateTime?
  tags        String[]
  win         Boolean    @default(false)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  journalEntries JournalEntry[]
}

enum Instrument {
  STOCK
  FUTURES
  FOREX
  CRYPTO
  OPTION
}

enum TradeSide {
  LONG
  SHORT
}

model JournalEntry {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  tradeId     String?
  trade       Trade?       @relation(fields: [tradeId], references: [id], onDelete: SetNull)
  date        DateTime
  notes       String
  screenshots Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Attachment {
  id        String       @id @default(cuid())
  entryId   String
  entry     JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  url       String
  mimeType  String
  createdAt DateTime     @default(now())
}

// next-auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
